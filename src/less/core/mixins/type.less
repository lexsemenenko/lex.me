// =============================================================================
// Mixins: Type
// =============================================================================

// Version:         1.0.0

// Description:     Mixins to help typography


// Note: We cannot use the same mixin for keywords becuase mixins 
//       ie .create vs .createSize are matched based on number of 
//       arguments see https://github.com/less/less.js/issues/1355

#TYPE() {
  .breakWord() {
    -ms-word-break: normal;
    word-break: normal;
    word-break: break-word;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    hyphens: auto;
  }

  .breakAll() {
    -ms-word-break: break-all;
    word-break: break-all;
    word-break: break-word;
    -webkit-hyphens: auto;
    -moz-hyphens: auto;
    hyphens: auto;
  }

  // No Parameter (base)
  .create() {
    #TYPE.create(@size: @t-base,
      @lh: @t-base-lh,
      @size-small: @t-break--base,
      /*if((@t-breakpoint-output), @t-break--base, false) */
      @lh-small: @t-break--base-lh,
      @margin: true);
  }

  // All options (manual)
  .create(@size,
    @lh: false,
    @size-small: false,
    @lh-small: false,
    @family: @t-family-base,
    @with-p: false,
    @margin: false,
    @breakpoint: @t-breakpoint ) {

    font-family: @family;
    // @return-em: #CALC.em(@size, @lh)[];


    & when not (@toggle-rem =on) {
      font-size: @size;
    }

    & when (@toggle-rem =on) {
      #TYPE.rem(@size);
    }

    & when not (@lh =false) {
      @em: #CALC.em(@size, @lh)[];
      line-height: @em;

      & when (@margin =true) {
        margin-bottom: @em * @t-margin-multiplier;
      }

      // Add a paragraph selector (used to style whole blocks)
      p when not (@with-p =false) {
        & when not (@toggle-rem =on) {
          font-size: @size;
        }

        & when (@toggle-rem =on) {
          #TYPE.rem(@size);
        }

        line-height: @em;
        margin-bottom: @em * @t-margin-multiplier;
      }
    }

    // Small Size
    & when not (@size-small =false) {
      @media @breakpoint {
        & when not (@toggle-rem =on) {
          font-size: @size-small;
        }

        & when (@toggle-rem =on) {
          #TYPE.rem(@size-small);
        }

        & when not (@lh-small =false) {
          @em: #CALC.em(@size-small, @lh-small)[];
          line-height: @em;

          & when (@margin =true) {
            margin-bottom: @em * @t-margin-multiplier;
          }

          p when not (@with-p =false) {
            line-height: @em;
            margin-bottom: @em * @t-margin-multiplier;

            & when (@toggle-rem =on) {
              #TYPE.rem(@size-small);
            }
          }
        }
      }
    }
  }

  // By Keyword
  .createSize(@keyword, @margin: false) when (isstring(@keyword)) {
    & when (@keyword ="base") or (@keyword ="medium") {
      #TYPE.create(@size: @t-base,
        @lh: @t-base-lh,
        @size-small: @t-break--base,
        /*if((@t-breakpoint-output), @t-break--base, false) */
        @lh-small: @t-break--base-lh,
        @margin: @margin );
    }

    & when (@keyword ="small-x") {
      #TYPE.create(@size: @t-small-x,
        @lh: @t-small-x-lh,
        @size-small: @t-break--small-x,
        /*if((@t-breakpoint-output), @t-break--small-x, false) */
        @lh-small: @t-break--small-x-lh,
        @margin: @margin );
    }

    & when (@keyword ="small") {
      #TYPE.create(@size: @t-small,
        @lh: @t-small-lh,
        @size-small: @t-break--small,
        /*if((@t-breakpoint-output), @t-break--small, false) */
        @lh-small: @t-break--small-lh,
        @margin: @margin );
    }

    & when (@keyword ="large") {
      #TYPE.create(@size: @t-large,
        @lh: @t-large-lh,
        @size-small: @t-break--large,
        /*if((@t-breakpoint-output), @t-break--large, false) */
        @lh-small: @t-break--large-lh,
        @margin: @margin );
    }

    & when (@keyword ="large-x") {
      #TYPE.create(@size: @t-large-x,
        @lh: @t-large-x-lh,
        @size-small: @t-break--large-x,
        /*if((@t-breakpoint-output), @t-break--large-x, false) */
        @lh-small: @t-break--large-x-lh,
        @margin: @margin );
    }

    & when (@keyword ="large-xx") {
      #TYPE.create(@size: @t-large-xx,
        @lh: @t-large-xx-lh,
        @size-small: @t-break--large-xx,
        /*if((@t-breakpoint-output), @t-break--large-xx, false) */
        @lh-small: @t-break--large-xx-lh,
        @margin: @margin );
    }
  }

  .emLineHeight(@font-size, @lh) {
    & when (get-unit(@lh)=em) {
      line-height: @lh;
    }

    & when (get-unit(@lh)=px) {
      line-height: unit((@lh / @font-size), em);
    }
  }

  .preWrap() {
    white-space: pre-wrap;
    /* css-3 */
    white-space: -moz-pre-wrap;
    /* Mozilla, since 1999 */
    white-space: -pre-wrap;
    /* Opera 4-6 */
    white-space: -o-pre-wrap;
    /* Opera 7 */
    word-wrap: break-word;
    /* Internet Explorer 5.5+ */
  }

  .rem(@font-size) {
    font-size: @font-size;
    font-size: unit((@font-size / @t-base), rem);
  }

  .shadowBorder(@color, @border-size) {
    text-shadow: -@border-size -@border-size 0 @color, @border-size -@border-size 0 @color, -@border-size @border-size 0 @color, @border-size @border-size 0 @color;
  }

  .improveQuality() {
    // Improves text quality, use only when needed.
    text-rendering: optimizelegibility;
    -moz-osx-font-smoothing: grayscale;
  }

  .fontFace(@name, @family, @folder: "fonts") {
    & when (@toggle-simple-paths =off) {
      @charset "UTF-8";

      @font-face {
        font-family: "@{family}";
        src:url("@{site-theme-path}/@{folder}/@{name}.eot?v=@{i-suffix}");
        src:url("@{site-theme-path}/@{folder}/@{name}.eot?#iefix&v=@{i-suffix}") format("embedded-opentype"),
        url("@{site-theme-path}/@{folder}/@{name}.woff?v=@{i-suffix}") format("woff"),
        url("@{site-theme-path}/@{folder}/@{name}.ttf?v=@{i-suffix}") format("truetype"),
        url("@{site-theme-path}/@{folder}/@{name}.svg#@{name}&v=@{i-suffix}") format("svg");
        font-weight: normal;
        font-style: normal;
      }
    }

    & when (@toggle-simple-paths =on) {
      @charset "UTF-8";

      @font-face {
        font-family: "@{family}";
        src:url("../@{folder}/@{name}.eot?v=@{i-suffix}");
        src:url("../@{folder}/@{name}.eot?#iefix&v=@{i-suffix}") format("embedded-opentype"),
        url("../@{folder}/@{name}.woff?v=@{i-suffix}") format("woff"),
        url("../@{folder}/@{name}.ttf?v=@{i-suffix}") format("truetype"),
        url("../@{folder}/@{name}.svg#@{name}&v=@{i-suffix}") format("svg");
        font-weight: normal;
        font-style: normal;
      }
    }
  }
}